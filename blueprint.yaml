tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://cloudify.co/spec/cloudify/5.0.0/types.yaml
  - plugin:cloudify-openstack-plugin

inputs:
  openstack_config:
    description: >
      Parameters for connecting to OpenStack.
    type: cloudify.openstack.types.configuration
    default:
      username: { get_secret: openstack_username }
      password: { get_secret: openstack_password }
      tenant_name: { get_secret: openstack_tenant_name }
      auth_url: { get_secret: openstack_auth_url }
      region: { get_secret: openstack_region }

  external_network_name:
    description: >
      Name of external network, from which to obtain a floating IP.
      It is assumed that the external network already exists, as external
      networks are typically created by OpenStack administrators rather than
      application deployers.
    type: string
    default: { get_secret: external_network_name }

  agent_security_group_name:
    description: >
      Name of security group to which all agent VM's belong. It is assumed
      that the agents' security group already exists, as it is reusable across
      multiple deployments and should be created by administrators.
    type: string
    default: { get_secret: default_agents_security_group }

  keypair_name:
    description: >
      Name of keypair to attach to the created VM.
    type: string
    default: { get_secret: openstack_default_keypair_name }

  resource_name_prefix:
    description: >
      Prefix to prepend to created resources' names.
    type: string

  image_id:
    description: >
      Name of image to boot from.
    type: string
    default: { get_secret: default_linux_image_id }

  flavor_id:
    description: >
      Name of flavour to use for the created VM.
    type: string
    default: { get_secret: default_linux_flavour_id }

  router_name:
    description: >
      Name of router to connect the new subnet to.
      The router is expected to already exist, as routers are typically
      created by OpenStack administrators.
    type: string
    default: { get_secret: default_router_name }

  network_name:
    description: >
      Name of network that the new VM should connect to.
    type: string
    default: { get_secret: default_management_network_name }

  subnet_name:
    description: >
      Name of subnet to connect to.
    type: string
    default: { get_secret: default_subnet_name }

  agent_user:
    type: string
    default: { get_secret: default_linux_agent_user }

  private_key_path:
    type: string
    default: { get_secret: default_private_key_path }

node_templates:
  app_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: { get_input: openstack_config }
      resource_id: { concat: [ { get_input: resource_name_prefix }, '_sg' ] }
      rules:
        - direction: ingress
          protocol: tcp
          port_range_min: 8080
          port_range_max: 8080
        - direction: ingress
          protocol: tcp
          port_range_min: 9990
          port_range_max: 9990

  agent_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: { get_input: openstack_config }
      resource_id: { get_input: agent_security_group_name }
      use_external_resource: true

  floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: { get_input: openstack_config }
      floatingip:
        floating_network_name: { get_input: external_network_name }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: { get_input: openstack_config }
      resource_id: { get_input: router_name }
      use_external_resource: true

  network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: { get_input: openstack_config }
      resource_id: { get_input: network_name }
      use_external_resource: true

  subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: { get_input: openstack_config }
      resource_id: { get_input: subnet_name }
      use_external_resource: true

  port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: { get_input: openstack_config }
    relationships:
      - type: cloudify.relationships.contained_in
        target: network
      - type: cloudify.relationships.connected_to
        target: subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: agent_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: app_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: floating_ip

  vm:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: { get_input: openstack_config }
      agent_config:
        user: { get_input: agent_user }
        key: { get_input: private_key_path }
      image: { get_input: image_id }
      flavor: { get_input: flavor_id }
      server:
        key_name: { get_input: keypair_name }
    relationships:
      - type: cloudify.openstack.server_connected_to_port
        target: port

capabilities:
  private_ip:
    value: { get_attribute: [ vm, ip ] }
  public_ip:
    value: { get_attribute: [ floating_ip, floating_ip_address ] }
  vm_node_instance_id:
    value: { get_attribute: [ vm, node_instance_id ]}
